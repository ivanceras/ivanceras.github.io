[
  {
    "title": "Untitled",
    "url": "/content/Sauron.html",
    "body": "Sauron is an web framework for creating fast and interactive client side web application, as well as server-side rendering for back-end web applications.\n\n\nPrerequisite:\n\n```sh\ncargo install wasm-pack\ncargo install basic-http-server\n```\n"
  },
  {
    "title": "Untitled",
    "url": "/content/Sauron-native.html",
    "body": "Sauron-native is a multi-faceted cross-platform GUI library.\n"
  },
  {
    "title": "Rustorm",
    "url": "/content/Rustorm.html",
    "body": "# Rustorm\n\nRustorm is an RDBMS orm with support for API\nin extracting data and the database metadata.\n\n#### Supported Database:\n - PostgreSQL\n - SQLite\n\nRustorm is wholly used by [Diwata](Diwata.md)\n"
  },
  {
    "title": "Design Implementation",
    "url": "/content/Svgbob/Design-Implementation.html",
    "body": "# Design Implementation\n\nSvgbob converts characters into a graphical element, however listing every possible combination of characters for each of the 8 neighbors\nwould be exhausting and impractical.\n\nFor each character, we will subdivide it into 25 blocks at 5x5 cells.\n\n```bob\n\n        ┌─┬─┬─┬─┬─┐\n        │a│b│c│d│e│\n        ├─┼─┼─┼─┼─┤\n        │f│g│h│i│j│\n        ├─┼─┼─┼─┼─┤\n        │k│l│m│n│o│\n        ├─┼─┼─┼─┼─┤\n        │p│q│r│s│t│\n        ├─┼─┼─┼─┼─┤\n        │u│v│w│x│y│\n        └─┴─┴─┴─┴─┘\n\n```\n\nSo, a character like `-` it will be line connecting from block `k` to block `o`\n"
  },
  {
    "title": "Untitled",
    "url": "/summary.html",
    "body": "- [Github profile](https://github.com/ivanceras)\n- [Resume](content/Resume.md)\n- [Spongedown](content/Spongedown.md)\n- [Svgbob](content/Svgbob.md)\n    - [Svgbob specification](content/Svgbob/Specification.md)\n    - [Design architecture](content/Svgbob/Architecture.md)\n    - [Design implementation](content/Svgbob/Design-Implementation.md)\n- [Sauron](content/Sauron.md)\n- [Sauron-native](content/Sauron-native.md)\n- [Rustorm](content/Rustorm.md)\n- [sqlparser-rs](https://github.com/andygrove/sqlparser-rs)\n- [comrak](https://github.com/kivikakk/comrak)\n- [term-table-rs](https://github.com/RyanBluth/term-table-rs)\n- [url_path](https://github.com/ivanceras/url_path)\n- [r2d2-sqlite](https://github.com/ivanceras/r2d2-sqlite)\n- [blob-uuid](https://github.com/ivanceras/blob-uuid)\n- [Balisong](https://github.com/ivanceras/balisong)\n"
  },
  {
    "title": "Svgbob Specification",
    "url": "/content/Svgbob/Specification.html",
    "body": "# Svgbob Specification\n\n#### Characters\nSvgbob relies on set of characters that are easily accessible on your keypad.\nEach of these character has certain set of behaviors depending on the neighbor character.\n\nThese are the most common characters that are used.\n\n|Character | Common Name           |\n|----------|-----------------------|\n|     .    | period or dot         |\n|     ,    | comma                 |\n|     `    | backtick or backquote |\n|     '    | quote or singlequote  |\n|     +    | plus sign or cross    |\n|     *    | asterisk              |\n|     o    | letter o              |\n|     O    | capital letter O      |\n|     -    | dash or hypen         |\n|     |    | vertical bar          |\n|     ~    | tilde                 |\n|     _    | underscore            |\n|     :    | colon                 |\n|     !    | exclamation mark      |\n|     <    | less than sign        |\n|     >    | greater than sign     |\n|     v    | letter v              |\n|     V    | capital letter V      |\n|     ^    | caret                 |\n|     /    | Forward slash         |\n|     \\    | Backward slash        |\n|     \"    | Double quote          |\n\n\n## Character general behaviors\n\n#### Period `.`\n - Period makes a rounded corner on the top-left if a line connects to it from the bottom\nand from the right.\n\n```{side-to-side.bob}\n  .--\n  |\n```\n\n - Period makes a rounded corner on the top-right if a line connects to it from the bottom\n and from the left.\n\n```{side-to-side.bob}\n  --.\n    |\n```\n\n#### Comma `,`\nComma makes a rounded corner on the top-left if a line connects to it from the bottom\nand from the right.\n\n```{side-to-side.bob}\n  ,--\n  |\n```\n\n#### Backtick `` ` ``\nBacktick makes a rounded corner on the bottom-left if a line connects to it from the top\nand from the right.\n\n```{side-to-side.bob}\n  |\n  `--\n```\n\n#### Single quote `'`\n - Single quote makes a rounded corner on the bottom-left if a line connects to it from the top\n and from the right.\n\n```{side-to-side.bob}\n  |\n  '--\n```\n\n - Single quote makes a rounded corner on the bottom-right if a line connects to it from the top\n and from the left.\n\n```{side-to-side.bob}\n      |\n    --'\n```\n\n#### Plus sign `+`\n - Plus sign makes a sharp corner when connected from 2 perpendicular lines.\n\n```{side-to-side.bob}\n   +--  --+\n   |      |\n\n   |      |\n   +--  --+\n```\n\n - Plus sign makes an intersection  when connected from 4 directions (top, right, bottom, left)\n\n```{side-to-side.bob}\n       |\n     --+--\n       |\n```\n\n\n#### Asterisk `*`\nAsterisk makes small solid circle when connected to a line\n\n```{side-to-side.bob}\n  *---  ---*\n```\n\n\n#### Small letter `o`\nThe letter **o** makes small clear circle when connected to a line\n\n```{side-to-side.bob}\n  o---  ---o\n```\n\n#### Big letter `O`\nThe big letter **O** makes bigger clear circle when connected to a line\n\n```{side-to-side.bob}\n   O--- ---O---\n```\n\n\n#### Dash `-`\nDash makes a solid line. Place them next to each other to form a longer line\n\n```{side-to-side.bob}\n   ---------------\n```\n\n#### Broken line `- - -`\n3 dash line with space in-between them (ie: `- - -`) makes a broken line\n\n```{side-to-side.bob}\n   - - - - - - - - - - -\n```\n\n####  Vertical bar `|`\nVertical bar makes a vertical line\n\n```{side-to-side.bob}\n    |\n    |\n```\n\n\n#### Tilde `~`\nTilde makes a broken line\n\n```{side-to-side.bob}\n   ~~~~~~~~~~~~~\n```\n\n\n#### Underscore `_`\nUnderscore makes lowered solid line\n\n```{side-to-side.bob}\n   ________________\n```\n\n#### Colon `:`\nColon makes vertical broken line\n\n```{side-to-side.bob}\n    :\n    :\n```\n\n\n#### Exclamation mark `!`\nExclamation mark makes a vertical broken line\n\n```{side-to-side.bob}\n    !\n    !\n```\n\n#### Less than sign `<`\nLess than sign makes an arrow to the left if a line connects to it from the right\n\n```{side-to-side.bob}\n   <-----\n```\n\n#### Greater than sign `>`\nGreather than sign makes an arrow to the right if a line connects to it from left\n\n```{side-to-side.bob}\n   ----->\n```\n\n#### Letter `V` (both lowercase and capital)\n - Letter `V` makes an arrow pointing bottom if a line connects to it from the top\n\n```{side-to-side.bob}\n    |\n    V\n```\n\n - Letter `V` makes an arrow pointing bottom-left if a line connects to it from the top-right\n\n```{side-to-side.bob}\n      /\n     V\n```\n\n - Letter `V` makes an arrow pointing bottom-right if a line connects to it from the top-left\n\n```{side-to-side.bob}\n    \\\n     V\n```\n\n#### Caret `^`\n - makes an upward arrow if a line connects to it from the bottom\n\n```{side-to-side.bob}\n   ^\n   |\n```\n\n\n - makes an arrow pointing top-left if a line connects to it from the bottom-right\n\n```{side-to-side.bob}\n  ^\n   \\\n```\n\n - makes an arrow pointing top-right if a line connects to it from the bottom-left\n\n```{side-to-side.bob}\n     ^\n    /\n```\n\n#### Forward slash\n\nForward slash makes a 60 degree angled lines\n\n```{side-to-side.bob}\n     /\n    /\n```\n\n#### Backslash\n\nBackslash makes a 120 desgree angled lines\n\n```{side-to-side.bob}\n   \\\n    \\\n```\n\n#### Double quotes\n\nDouble quotes is used as an escape to prevent svgbob from interpreting the characters as drawing character and use them as text instead.\n\n```{side-to-side.bob}\n\".----------------.\"\n\"| Don't draw me  |\"\n\"`----------------'\"\n\n .--------------.\n | Ok, draw me  |\n `--------------'\n```\n\n## Combination of characters\n\n#### Period and slash\n\n```{side-to-side.bob}\n  .--   --.   \\        /\n   \\     /     `--  --'\n```\n\n#### Plus and slash\n\n```{side-to-side.bob}\n  +--   --+   \\        /\n   \\     /     +--  --+\n```\n\n#### Underscore and vertical lines\n\n```{side-to-side.bob}\n    |   __\n    |__   |\n          |\n\n```\n\n#### Parenthesis, period and quote\n\n\n```{side-to-side.bob}\n   .    .\n  (      )\n   `    '\n```\n[Circle specification](Circles.md)\n\n[Back to Svgbob](../Svgbob.md)\n"
  },
  {
    "title": "Diwata",
    "url": "/content/Diwata.html",
    "body": "# Diwata\n\nDiwata is a user-friendly and content-aware database interface.\n\n\n#### Features\n- Automatic display of direct and indirect linked record\n- Freeze column and freeze rows\n- Infinite scrolling / loading of page on scrolling\n- User friendly granular search and filter\n- Diplay descriptive referred records. (ie: Instead of displaying the foreign_key value integer or uuid, display the referred records in such a way it is distinguisable by the user)\n- Well integrated with the browsers, clickable tables, records and tabs can be openned in a new window and displays the data as though clicking on it.\n\n[Diwata architecture](Diwata/Architecture.md)\n\n[Code Repository](https://github.com/ivanceras/diwata)\n"
  },
  {
    "title": "Svgbob Architecture and Design phases",
    "url": "/content/Svgbob/Architecture.html",
    "body": "# Svgbob Architecture and Design phases\n\nSvgbob creates an svg drawing based on the input ascii art diagrams.\nIt achieves this by creating a corresponding fragment for each character, and then this little fragments\nare then merged to form lines and arcs. The lines and arcs are then endorsed into high level shapes such as rect, circles.\n\n### Name inspiration:\n- svg for svg document and drawing.\n- bob for Alice and Bob as common characters in most diagrams\n   Bob Ross - a painter who like to draws happy little trees.\n\n### Library used\n- [nalgebra](https://www.nalgebra.org/) and [ncollide2d](https://ncollide.org/) for geometric function calculations such as calculating whether lines are intersecting, collinear. Computing the clipping of lines and boxes.\n- [pom](https://github.com/J-F-Liu/pom) for parsing the styling directives(Legend) at the bottom of the document\n- [sauron](https://github.com/ivanceras/sauron) for building the svg document object tree.\n\n\n### **Iterations, re-architecture rewrites**\n\n####  Phase 1\nExploding if statements. This was in elm\n   [fullcode](https://github.com/ivanceras/elm-examples/blob/master/elm-bot-lines/Grid.elm)\n\n```elm\ngetElement x y model =\n    let\n        char = get x y model\n    in\n        case char of\n            Just char ->\n                if isVertical char\n                    && not (isNeighbor left isAlphaNumeric)\n                    && not (isNeighbor right isAlphaNumeric) then\n                    Just Vertical\n                else if isHorizontal char\n                    && not (isNeighbor left isAlphaNumeric)\n                    && not (isNeighbor right isAlphaNumeric) then\n                    Just Horizontal\n                else if isIntersection char then\n                    let\n                        isVerticalJunctionLeft =\n                            isNeighbor top isVertical\n                            && isNeighbor(bottomOf  x y model) isVertical\n                            && isNeighbor(leftOf  x y model) isHorizontal\n\n                        isVerticalJunctionRight =\n                            isNeighbor top isVertical\n                            && isNeighbor bottom isVertical\n                            && isNeighbor right isHorizontal\n\n                        isHorizontalJunctionTop =\n                            isNeighbor left isHorizontal\n                            && isNeighbor right isHorizontal\n                            && isNeighbor top isVertical\n\n                        isHorizontalJunctionBot =\n                            isNeighbor left isHorizontal\n                            && isNeighbor right isHorizontal\n                             && isNeighbor bottom isVertical\n\n                        isTopLeftIntersection =\n                            isNeighbor bottom isVertical && isNeighbor right isHorizontal\n\n                        isTopRightIntersection =\n                            isNeighbor bottom isVertical && isNeighbor left isHorizontal\n\n                        isBottomRightIntersection =\n                            isNeighbor top isVertical && isNeighbor left isHorizontal\n\n                        isBottomLeftIntersection =\n                            isNeighbor top isVertical && isNeighbor right isHorizontal\n\n                        isCrossIntersection =\n                            isNeighbor top isVertical\n                            && isNeighbor bottom isVertical\n                            && isNeighbor left isHorizontal\n                            && isNeighbor right isHorizontal\n\n    ...  200 more lines...\n\n```\nThough elm is fast, but if you throw a lot of conditional branching to it, it will slow it down.\nAt least I don't get to have runtime errors here if it was written in js.\nAdding an edgecase is just appending a new if else statement at the bottom of the statements.\n\n**Pros:** Very simple design. Just if statements and return the appropriate shape the character will take form\n    Adding edge case behaviour is just appending an `else if` to the nearest conditional(`if`) behavior.\n\n**Caveats:** The fragments/drawing elements are named. Naming is hard, we can not name all of them. Consistency is broken.\n\n\n\n\n#### Phase2:\nNow in rust. The character behavior is stored in a `Vec<(condition, drawing_elements)>`\nThis is already close to the current architecture.\n\n  **Improvements:**\n   - Runs a lot faster than elm. Converting the code from elm to rust, accelerate my learning of the usage of functional programming in rust.\n   - Consumed elements, if certain group of elements matches a higher level shapes, those elements are consumed/remove from the grid to\n   avoid generating additional drawing elements when iterated with the rest of the characters in the grid.\n\n\n```rust\n    //get the paths in the location x,y\n    //if non path, then see if it can return a text path\n    fn get_elements(&self, x:isize, y:isize, settings: &Settings) -> Option<Vec<Element>>{\n        ...\n        //common path lines\n        let vertical = Element::solid_line(center_top, center_bottom);\n        let horizontal = Element::solid_line(mid_left, mid_right);\n        let slant_left = Element::solid_line(high_left, low_right);\n        let slant_right = Element::solid_line(low_left, high_right);\n        let low_horizontal = Element::solid_line(low_left, low_right);\n\n\n        let match_list: Vec<(bool, Vec<Element>)> =\n            vec![\n                /*\n                      .-\n                      |\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(right, is_horizontal)\n                 && self.is_char(bottom, is_vertical),\n                 vec![cxdy_cxey.clone(), arc_excy_cxdy.clone()]\n                ),\n                /*\n                      -.\n                       |\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(left, is_horizontal)\n                 && self.is_char(bottom, is_vertical),\n                 vec![cxdy_cxey.clone(), arc_cxdy_axcy.clone()]\n                ),\n                /*\n                     |\n                     '-\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(right, is_horizontal)\n                 && self.is_char(top, is_vertical),\n                 vec![cxay_cxby.clone(), arc_cxby_excy.clone()]\n                ),\n                /*\n                     |\n                    -'\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(left, is_horizontal)\n                 && self.is_char(top, is_vertical),\n                 vec![cxay_cxby.clone(), arc_axcy_cxby.clone()]\n                ),\n                /*\n                    .-\n                   /\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(right, is_horizontal)\n                 && self.is_char(bottom_left, is_slant_right),\n                 vec![axey_bxdy.clone(), arc_excy_bxdy.clone()]\n                ),\n                /*\n                   -.\n                     \\\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(left, is_horizontal)\n                 && self.is_char(bottom_right, is_slant_left),\n                 vec![exey_dxdy.clone(), arc_dxdy_axcy.clone()]\n                ),\n                /*\n                   -.\n                   /\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(left, is_horizontal)\n                 && self.is_char(bottom_left, is_slant_right),\n                 vec![axey_bxdy.clone(), arc_bxdy_axcy.clone()]\n                ),\n                /*\n                   .-\n                    \\\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(right, is_horizontal)\n                 && self.is_char(bottom_right, is_slant_left),\n                 vec![exey_dxdy.clone(), arc_excy_dxdy.clone()]\n                ),\n                /*\n                   \\\n                    '-\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(right, is_horizontal)\n                 && self.is_char(top_left, is_slant_left),\n                 vec![axay_bxby.clone(), arc_bxby_excy.clone()]\n                ),\n                /*\n                     /\n                    '-\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(right, is_horizontal)\n                 && self.is_char(top_right, is_slant_right),\n                 vec![dxby_exay.clone(), arc_dxby_excy.clone()]\n                ),\n                /*\n                    \\\n                    -'\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(left, is_horizontal)\n                 && self.is_char(top_left, is_slant_left),\n                 vec![axay_bxby.clone(), arc_axcy_bxby.clone()]\n                ),\n                /*\n                      /\n                    -'\n                */\n                (self.is_char(this, is_round)\n                 && self.is_char(left, is_horizontal)\n                 && self.is_char(top_right, is_slant_right),\n                 vec![dxby_exay.clone(), arc_axcy_dxby.clone()]\n                ),\n            ]\n```\n\n\n```rust\n\n        // Circle 12\n        //        _\n        //      .' '.\n        //     (  +  )\n        //      `._.'\n        if self.in_left(3).is('(')\n            && self.in_right(3).is(')')\n            && self.in_top(2).is('_')\n            && self.bottom().is('_')\n            && self.top().in_left(2).any(\",.\")\n            && self.top_left().is('\\'')\n            && self.top_right().any(\"`'\")\n            && self.top().in_right(2).is('.')\n            && self.bottom().in_left(2).any(\"`'\")\n            && self.bottom_left().is('.')\n            && self.bottom_right().any(\".,\")\n            && self.bottom().in_right(2).is('\\'')\n        {\n            elm.push(open_circle(m, 12));\n            consumed.extend(vec![\n                left3(),\n                right3(),\n                top2(),\n                bottom(),\n                top_left2(),\n                top_left(),\n                top_right(),\n                top_right2(),\n                bottom_left2(),\n                bottom_left(),\n                bottom_right(),\n                bottom_right2(),\n            ]);\n        }\n```\n**Caveats:**\n    - Merging of small fragments requires checking against all the other fragments of the entire grid. Runtime complexity is at least O(n^2)\n    - Endorsing to shapes requires a lot of if statement comparisons and every cell is checked even for cell that has only a few elements that couldn't form into a certain shapes is tested.\n    - Processing high level stage and low level fragment stage is one execution.\n    - Drawing elements are still named.\n\n\n\n\n#### Phase 3:\nAttempts to add a signal strength to characters depending on their\nneighboring character whether they should connect or not. This makes the dynamic behavior flexible\nbut the control flow is not very intuitive.\n\n - Strong + Strong should connect\n - Medium + Medium connects\n - Medium + Weak may connect\n - Weak + Weak should not connect.\n\n```rust\n\n    /// get the characteristic of a character\n    /// it's behavior and the intended behavior\n    ///\n    ///    ┌─┬─┬─┬─┬─┐\n    ///    │a│b│c│d│e│\n    ///    ├─┼─┼─┼─┼─┤\n    ///    │f│g│h│i│j│\n    ///    ├─┼─┼─┼─┼─┤\n    ///    │k│l│m│n│o│\n    ///    ├─┼─┼─┼─┼─┤\n    ///    │p│q│r│s│t│\n    ///    ├─┼─┼─┼─┼─┤\n    ///    │u│v│w│x│y│\n    ///    └─┴─┴─┴─┴─┘\n    ///\n    fn get_characteristic(&self) -> Option<Characteristic> {\n        ///////////////////////////\n        //\n        // ., dot or period and comma\n        //\n        ///////////////////////////\n        if self.any(\".,\") {\n            Some(Characteristic {\n                is_static: false,\n                intensify: vec![\n                    //  -.  +.\n                    (\n                        K,\n                        Condition {\n                            loc: left(),\n                            can: ConnectTo(O, Medium),\n                        },\n                    ),\n                    //  .-  .+\n                    (\n                        O,\n                        Condition {\n                            loc: right(),\n                            can: ConnectTo(K, Medium),\n                        },\n                    ),\n                    //  _.\n                    (\n                        U,\n                        Condition {\n                            loc: left(),\n                            can: ConnectTo(Y, Strong),\n                        },\n                    ),\n                    //  ._\n                    (\n                        Y,\n                        Condition {\n                            loc: right(),\n                            can: ConnectTo(U, Strong),\n                        },\n                    ),\n                    //      .\n                    //     /\n                    (\n                        U,\n                        Condition {\n                            loc: bottom_left(),\n                            can: ConnectTo(E, Strong),\n                        },\n                    ),\n                    //      /    only for / else   _\n                    //     .                        .   will connect\n                    (\n                        E,\n                        Condition {\n                            loc: top_right(),\n                            can: IsStrongAll(vec![E, U]),\n                        },\n                    ),\n                    //      .\n                    //       \\\n                    (\n                        Y,\n                        Condition {\n                            loc: bottom_right(),\n                            can: ConnectTo(A, Strong),\n                        },\n                    ),\n                    ...\n                ],\n                intended_behavior: vec![\n                    //     .-\n                    //    /\n                    (vec![O, U], vec![arc(o, q, 4), line(q, u)]),\n                    //     .-\n                    //      \\\n                    (vec![O, Y], vec![arc(o, s, 4), line(s, y)]),\n                    //     -.\n                    //       \\\n                    (vec![K, Y], vec![arc(s, k, 4), line(s, y)]),\n                    //     -.\n                    //     /\n                    (vec![K, U], vec![line(u, q), arc(q, k, 2)]),\n                    //       /\n                    //      .\n                    //     /\n                    (vec![U, E], vec![line(u, e)]),\n                    //     \\\n                    //      .\n                    //       \\\n                    ...\n                ],\n                properties: vec![\n                    (O, Weak, vec![arc(o, r, 2)]),\n                    (K, Weak, vec![arc(r, k, 2)]),\n                    (W, Medium, vec![line(r, w)]),\n                    (U, Weak, vec![line(q, u)]),\n                    (Y, Weak, vec![line(s, y)]),\n                    (A, Weak, vec![line(m, a)]),\n                    (E, Weak, vec![line(m, e)]),\n                    (F, Weak, vec![line(m, f)]),\n                    (J, Weak, vec![line(m, j)]),\n                ],\n            })\n        }\n```\n\n**Pros:**\n - Characters are assigned with certain properties. This allows similar characters such as dash(-) and line drawing (-) to have the same behavior\n     without explicitly coding for each of those variations.\n\n\n#### Phase 4.\n\n**Improvements:**\n- Uses of Buffers\n   - StringBuffer, input strings are slices into rows and columns\n   - CellBuffer, which cells contains which character.\n   - FragmentBuffer, which cell contains what fragments(drawing elements)\n   - PropertyBuffer, what is the property of each cell based on the the character it contains.\n\nPropertyBuffer is calculated only once for each character, so the succeeding lookup should not waste execution time to recompute.\n\n\n**How the fragments are conceived based on a character?**\n\n**Neighbor character:** There are 8 neighbors of a character and each character on the input is checked agains this 8 neighbor for appropriate drawing element\n\n```bob\n  +---------+  +------+  +--------+\n  |  TopLeft|  | Top  |  |TopRight|\n  +---------+  +------+  +--------+\n  +---------+  +------+  +--------+\n  |  Left   |  |(char)|  | Right  |\n  +---------+  +------+  +--------+\n +----------+  +------+  +-----------+\n |BottomLeft|  |Bottom|  |BottomRight|\n +----------+  +------+  +-----------+\n```\n\n**Character Grid:** a 5x5 grid which covers the most significant points for a character to be converted into drawing elements.\n\nCharacter grid: / is the line connecting E to U. Dash is connecting K to O, etc.\n```bob\n\n  0 1 2 3 4           B C D\n 0┌─┬─┬─┬─┐        A┌─┬─┬─┬─┐E\n 1├─┼─┼─┼─┤         │ │ │ │ │\n 2├─┼─┼─┼─┤        F├─G─H─I─┤J\n 3├─┼─┼─┼─┤         │ │ │ │ │\n 4├─┼─┼─┼─┤        K├─L─M─N─┤O\n 5├─┼─┼─┼─┤         │ │ │ │ │\n 6├─┼─┼─┼─┤        P├─Q─R─S─┤T\n 7├─┼─┼─┼─┤         │ │ │ │ │\n 8└─┴─┴─┴─┘        U└─┴─┴─┴─┘Y\n                      V W X\n\n```\nThese fragments are processed such as merging collinear lines that are touching their endpoints.\n\n```bob\n\n+--------------+        +------------+         +----------------+          +-----------------+\n| StringBuffer |------> | CellBuffer |-------->| FragmentBuffer |--------->|   Svg drawing   |\n+--------------+        +------------+         +----------------+          +-----------------+\n                              \\                                                           ^\n                               \\    +-------+                                            /\n                                `-->| Spans |                                           /\n                                    +-------+                                          /\n                                      \\                                               /\n                                       \\    +---------------+    .----------------.  /\n                                        `-->|Contact groups |---/ endorse shapes /--'\n                                            +---------------+  '----------------'\n```\n\n- **Optimizations.**\n    - Usage of span and contact groups.\n       Span group together that are neighbors. Contact groups group together fragments\n       that are touching together. Cells don't need to be checked against other cells\n       when they are far from each other. Merging of fragments such as lines into longer\n       lines needs to interact only elements that are within its group.\n- Endorsing group of fragments into higher level shapes.\n    - rect, rounded rect, circles, arcs are higher level shapes that are from small fragment components: arc,lines,\n\n- **Tagging shapes.**\n    Text inside of a shape with the pattern \"{\", <ident> \"}\" will become a tag of the enclosing shape.\n    At the DOM level, the shape is an svg dom element such as: rect,circle,path and the tag is the element `class`\n    which you can use css to apply a style to the element. The legend part at the bottom of the document is parsed\n    and converted into css which is then appended to the svg document.\n\n```rust\n\n    ///\n    ///      0 1 2 3 4           B C D\n    ///     0┌─┬─┬─┬─┐        A┌─┬─┬─┬─┐E\n    ///     1├─┼─┼─┼─┤         │ │ │ │ │\n    ///     2├─┼─┼─┼─┤        F├─G─H─I─┤J\n    ///     3├─┼─┼─┼─┤         │ │ │ │ │\n    ///     4├─┼─┼─┼─┤        K├─L─M─N─┤O\n    ///     5├─┼─┼─┼─┤         │ │ │ │ │\n    ///     6├─┼─┼─┼─┤        P├─Q─R─S─┤T\n    ///     7├─┼─┼─┼─┤         │ │ │ │ │\n    ///     8└─┴─┴─┴─┘        U└─┴─┴─┴─┘Y\n    ///                          V W X\n    pub static ref ASCII_PROPERTIES: BTreeMap<char, Property> = {\n\n            ...\n\n            vec![\n\n            //////////////////////\n            // dot period .\n            //////////////////////\n            (\n                '.',\n                vec![\n                    (Medium, vec![line(m,w)]), // connects down\n                    (Weak, vec![line(m,k)]), // connects left\n                    (Weak, vec![line(m,o)]), // connects right\n                ],\n                Arc::new(\n                        move|top_left, top, top_right, left, right, bottom_left, bottom, bottom_right| {\n                        vec![\n                            // .\n                            // |\n                            (bottom.line_strongly_overlap(c,h), vec![line(r,w)]),\n                            //   .\n                            //  / \\\n                            (bottom_left.line_strongly_overlap(e,i) && bottom_right.line_strongly_overlap(a,g), vec![line(m,u), line(m,y)]),\n                            //  .-\n                            //  |\n                            (right.line_overlap(k,l) && bottom.line_overlap(c,h), vec![arc(o,r,unit2), line(r,w)]),\n                            //   .-\n                            //  |\n                            (right.line_overlap(k,l) && bottom_left.line_overlap(c,h), vec![arc(m,cell.bottom_left().c(),unit4), line(m,o)]),\n                            // -.\n                            //  |\n                            (left.line_overlap(n,o) && bottom.line_overlap(c,h), vec![arc(r,k,unit2), line(r,w)]),\n                            // -.\n                            //   |\n                            //  exemption that bottom right is not a backquote\n                            (!bottom_right.is('`') && left.line_overlap(n,o) && bottom_right.line_overlap(c,h), vec![arc(cell.bottom_right().c(),m,unit4), line(k,m)]),\n                            //     .-\n                            //    /\n                            (right.line_overlap(k,l) && bottom_left.line_overlap(e,i), vec![arc(o, q, unit4), line(q, u)]),\n                            //     .-\n                            //      \\\n                            (right.line_overlap(k,l) && bottom_right.line_overlap(a,g) , vec![arc(o, s, between1_2), line(s, y)]),\n                            //     -.\n                            //       \\\n                            (left.line_overlap(n,o) && bottom_right.line_overlap(a,g), vec![arc(s, k, unit4), line(s, y)]),\n                            //     -.\n                            //     /\n                            (left.line_overlap(n,o) && bottom_left.line_overlap(e,i), vec![arc(q, k, between1_2), line(u, q)]),\n\n                            ...\n                        ]}\n                    )\n            ),\n```\n\n#### **Endorse to higher level shapes**\n\n```rust\n\n    /// First phase of endorsing to shapes, in this case, rects and rounded_rects\n    ///\n    /// This function is calling on endorse methods that is applicable\n    /// to fragments that are touching, to be promoted to a shape.\n    /// These includes: rect, roundedrect,\n    fn endorse_rects(groups: Vec<Contacts>) -> (Vec<Fragment>, Vec<Contacts>) {\n        let mut fragments = vec![];\n        let mut un_endorsed_rect: Vec<Contacts> = vec![];\n        for group in groups {\n            if let Some(fragment) = is_rect(group) {\n                fragments.push(fragment);\n            } else {\n                un_endorsed_rect.push(group);\n            }\n        }\n        (fragments, un_endorsed_rect)\n    }\n\n    ...\n\n    /// group of fragments can be check if they form:\n    /// - rectangle\n    fn is_rect(fragments: &Vec<Fragment>) -> bool {\n        if fragments.len() == 4 {\n            let parallels = parallel_aabb_group(fragments);\n            if parallels.len() == 2 {\n                let (a1, a2) = parallels[0];\n                let (b1, b2) = parallels[1];\n                let line_a1 = fragments[a1].as_line();\n                let line_b1 = fragments[b1].as_line();\n                let line_a2 = fragments[a2].as_line();\n                let line_b2 = fragments[b2].as_line();\n                line_a1.is_touching_aabb_perpendicular(line_b1)\n                    && line_a2.is_touching_aabb_perpendicular(line_b2)\n            } else {\n                false\n            }\n        } else {\n            false\n        }\n    }\n\n    ...\n\n    /// [X](Done) TODO: search only the subset of contacts that matches the circle.\n    /// if it is a subset then the circle is matched and the non-matching ones are returned\n    pub fn endorse_circle(search: &Vec<Contacts>) -> Option<(&Circle, Vec<usize>)> {\n        FRAGMENTS_CIRCLE.iter().rev().find_map(|(contacts, circle)| {\n            let (matched, unmatched) = is_subset_of(contacts, search);\n            if matched { Some((circle, unmatched)) } else { None }\n        })\n    }\n\n    ...\n\n    /// This function is calling on endorse algorithmn on fragments that\n    /// are neighbors, but not necessarily touching to be promoted to a shape.\n    /// These includes: circle, arc, and line with arrow heads.\n    fn endorse_circles_and_arcs(groups: Vec<Contacts>) -> (Vec<Fragment>, Vec<Contacts>) {\n        let mut fragments = vec![];\n        let mut un_endorsed_circles: Vec<Contacts> = vec![];\n        if let Some((circle, unmatched)) = circle_map::endorse_circle(&groups) {\n            fragments.push(circle.clone().into());\n            for um in unmatched {\n                un_endorsed_circles.push(groups[um].clone());\n            }\n        } else if let Some(arc) = circle_map::endorse_arc(&groups) {\n            fragments.push(arc.clone().into());\n        } else {\n            un_endorsed_circles.extend(groups)\n        }\n        (fragments, un_endorsed_circles)\n    }\n```\n\n\n\n```rust\n\n    //   ascii art,  Center Cell, Center Point, radius\n    pub static ref CIRCLE_MAP: Vec<(&'static str, Cell, Point, f32)> =\n        vec![\n            // CIRCLE_1\n            //center 0,0,o, radius = 0.5\n            (r#\"\n            ()\n            \"#, Cell::new(0,0), Cell::new(0,0).o(), 0.5),\n\n            ...\n\n            // CIRCLE_4\n            //center: 2,1,m radius: 2.0\n            (r#\"\n             ,-.\n            (   )\n             `-'\n            \"#, Cell::new(2,1), Cell::new(2,1).m(), 2.0),\n\n\n            // CIRCLE_12\n            //center:6,3,m radius: 6.0\n            (r#\"\n                _____\n              ,'     `.\n             /         \\\n            (           )\n             \\         /\n              `._____.'\n            \"#, Cell::new(6,3), Cell::new(6,3).m(), 6.0),\n\n            // CIRCLE_17\n            //center: 8,4,o radius: 8.5\n            (r#\"\n                .--------.\n              ,'          `.\n             /              \\\n            |                |\n            |                |\n            |                |\n             \\              /\n              `.          .'\n                `--------'\n            \"#, Cell::new(8,4), Cell::new(8,4).o(), 8.5),\n\n\n            ...\n\n            // CIRCLE_20\n            // center: 10,5,m radius: 10\n            (r#\"\n                _.-'''''''-._\n              ,'             `.\n             /                 \\\n            .                   .\n            |                   |\n            |                   |\n            |                   |\n             \\                 /\n              `._           _.'\n                 '-.......-'\n            \"#, Cell::new(10,5), Cell::new(10,5).m(), 10.0),\n        ];\n\n```\n\n#### Flexibility:\n- Adding behaviours and edge-cases is still simple\n- Due to the grouping of spans and contacts, it is now more efficient to check whether a combination\n    of fragments can be endorsed into a high level shapes.\n- Behavior can be coded according to the properties of their neighboring characters,\n    and/or can also specify that a neighbor should match a specific character. (ie: neighboring character top should be a caret `^`, then this is the behavior)\n\n#### Modular:\n-  Adding more shapes it can endorse to, such as in the circle map is merely putting the ascii art\nto right next to the existing ones, as oppused to the multiple if-statements in Phase 2\n- Adding endorse code to certain shapes is merely describing the filter rules on the combination of the fragments\n\n#### Extensiblity:\n- Since the new architecture is now implemented through the use of Buffers. It opens to a lot of possible improvements.\n- Shapes are now properly endorsed, which can be styled with css standard. Which means, users can add crazy css-animation to the shapes.\n- Making the cell buffer as a canvas. Meaning you can draw lines and shapes on it, while the system will try to match\n    the closest character appropriate to the input shape. A possibility of generating an ascii drawing from svg diagrams.\n    The reverse of the functionality of svgbob.\n\n#### Adaption of svgbob\n- As archlinux [package](https://aur.archlinux.org/packages/svgbob-git/)\n- As diagram module for [asciidoctor](https://asciidoctor.org/docs/asciidoctor-diagram/)\n- [Asciigrid](https://gitlab.com/mbarkhau/asciigrid/)\n- [kroki.io](https://kroki.io/)\n\n"
  },
  {
    "title": "Circles",
    "url": "/content/Svgbob/Circles.html",
    "body": "# Circles\n\n### Radius 0.5\n\n```{side-to-side.bob}\n()\n\n```\n\n#### Radius 1.0\n\n```{side-to-side.bob}\n\n(_)\n\n```\n\n### Radius 1.5\n\n```{side-to-side.bob}\n __\n(__)\n```\n\n\n#### Radius 2.0\n\n\n```{side-to-side.bob}\n .-.\n(   )\n `-'\n```\n\n#### Radius 2.5\n\n```{side-to-side.bob}\n .--.\n(    )\n `--'\n```\n\n#### Radius 3.0\n\n\n```{side-to-side.bob}\n   _\n .' '.\n(     )\n `._.'\n```\n\n#### Radius 3.5\n\n\n```{side-to-side.bob}\n    __\n  ,'  '.\n (      )\n  `.__.'\n```\n\n#### Radius 4.0\n\n```{side-to-side.bob}\n    ___\n  ,'   '.\n (       )\n  `.   .'\n    `-'\n```\n\n#### Radius 4.5\n\n```{side-to-side.bob}\n\n      ___\n    ,'   `.\n   /       \\\n   \\       /\n    `.___.'\n\n```\n\n#### Radius 5.0\n\n```{side-to-side.bob}\n\n       ____\n     ,'    `.\n    /        \\\n    \\        /\n     `.____.'\n\n\n\n\n```\n\n#### Radius 5.5\n\n```{side-to-side.bob}\n\n    ____\n  .'    `.\n /        \\\n(          )\n \\        /\n  `.____.'\n\n\n```\n\n#### Radius 6.0\n\n```{side-to-side.bob}\n\n    _____\n  ,'     `.\n /         \\\n(           )\n \\         /\n  `._____.'\n\n\n```\n\n#### Radius 6.5\n\n```{side-to-side.bob}\n\n\n         ______\n       ,'      `.\n      /          \\\n     |            |\n     |            |\n      \\          /\n       `.______.'\n\n\n\n```\n\n#### Radius 7.0\n\n```{side-to-side.bob}\n\n          _______\n        ,'       `.\n       /           \\\n      |             |\n      |             |\n       \\           /\n        `._______.'\n\n```\n\n#### Radius 7.5\n\n```{side-to-side.bob}\n\n       ________\n     ,'        `.\n    /            \\\n   |              |\n   |              |\n   |              |\n    \\            /\n     `.________.'\n\n\n```\n\n#### Radius 8.0\n\n```{side-to-side.bob}\n\n\n         __-----__\n       ,'         `.\n      /             \\\n     |               |\n     |               |\n     |               |\n      \\             /\n       `.         .'\n         `-------'\n\n```\n\n#### Radius 8.5\n\n```{side-to-side.bob}\n\n\n        .--------.\n      ,'          `.\n     /              \\\n    |                |\n    |                |\n    |                |\n     \\              /\n      `.          .'\n        `--------'\n\n\n```\n\n#### Radius 9.0\n\n```{side-to-side.bob}\n\n        _.-'''''-._\n      ,'           `.\n     /               \\\n    .                 .\n    |                 |\n    |                 |\n    |                 |\n     \\               /\n      `._         _.'\n         '-.....-'\n\n\n```\n\n#### Radius 9.5\n\n```{side-to-side.bob}\n\n        _.-''''''-._\n      ,'            `.\n     /                \\\n    .                  .\n    |                  |\n    |                  |\n    |                  |\n     \\                /\n      `._          _.'\n         '-......-'\n\n\n```\n\n#### Radius 10.0\n\n```{side-to-side.bob}\n\n      _.-'''''''-._\n    ,'             `.\n   /                 \\\n  .                   .\n  |                   |\n  |                   |\n  |                   |\n   \\                 /\n    `._           _.'\n       '-.......-'\n\n\n```\n\n[Back to Svgbob](../Svgbob.md)\n"
  },
  {
    "title": "Diwata Architecture",
    "url": "/content/Diwata/Architecture.html",
    "body": "# Diwata Architecture\n\n#### Diwata is comprised with 3 major components\n\n1. Rustorm\n2. Intel\n3. Client\n\n```bob\n\n             .----------.            .- - - - - - - - - -.\n            (  Rustorm   )  <|- - - -! Database metadata !\n             `----------'            `- - - - - - - - - -'\n                   |\n                   |\n                   |\n                   |\n                   v\n               _________\n              /         \\            . - - - - - - - - - - .\n             /   Intel   \\  <|- - - -! Data interpretation !\n             \\           /           `- - - - - - - - - - -'\n              \\_________/\n                   |\n                   |\n                   |\n                   |\n                   v\n        +--------------------+\n       /                      \\\n      /        Client          \\\n     /                          \\\n    /____________________________\\\n\n```\n\n#### Rustorm\nRustorm is the database ORM that takes care of extract table meta data\nfrom the underlying database.\n\n#### Intel\nIntel is the intellisense of the system which does inference of an interpreting\nthe data being instrospected. This contains the logic for determining the presentation\nof the data to the client. It fills the gap when there is not enough information\nextracted from the system.\n\n#### Client\nThe client does pull the curtain API and display the content in a nice\nand structure presentation. Aside from just being a interactice Rich client application,\nthe client is also responsible for mapping the URL to their corresponding application\nstate and modules activated. Sharing the URL to other users with the same login\ncredentials will show the same exact content.\n\n[Back to Diwata](../Diwata.md)\n"
  },
  {
    "title": "Svgbob",
    "url": "/content/Svgbob.html",
    "body": "# Svgbob\n\nSvgbob is a diagramming model\nwhich uses a set of typing characters\nto approximate the intended shape.\n\n```bob\n       .---.\n      /-o-/--\n   .-/ / /->\n  ( *  \\/\n   '-.  \\\n      \\ /\n       '\n```\nIt uses a [combination of characters](Svgbob/Specification.md)\nwhich are readily available on your keyboards.\n\nWhat can it do?\n\n#### Basic shapes\n\n```bob\n    .- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -.\n    !                                                    .            :\n    !   +------+   .------.    .------.      /\\        .' `.          :\n    !   |      |   |      |   (        )    /  \\     .'     `.   ^    :\n    !   +------+   '------'    '------'    '----'     `.   .'   /   # :\n    !     _______            ________               #   `.'    / ^ /  :\n    !    /       \\      /\\   \\       \\     o---->   | ^       # / /   :\n    !   /         \\    /  \\   )       )    <----#   | |  ^ :   / v    :\n    !   \\         /    \\  /  /_______/              v |  ! :          :\n    !    \\_______/      \\/                            o  ! V          :\n    !                                                                 :\n    !                                                      O          :\n    !    .-----------.       .   <.      .>  .           ^  \\         :\n    !   (             )     (      )    (     )           \\  \\        :\n    !    '-----+ ,---'       `>   '      `  <'             \\  v       :\n    !          |/                                           *         :\n    !          '                                       _        __    :\n    !        __   .-.   .--.   .--.--.     .--.      .' '.    ,'  '.  :\n    !   (_) (__) (   ) (    ) (  ( )  )   (    )    (     )  (      ) :\n    !             '-'   `--'   `--'--'     `--'      `._.'    `.__.'  :\n    !                                                                 !\n    !      ___        ____         ____           _____               !\n    !    ,'   `.    ,'    `.     .'    `.       ,'     `.             !\n    !   /       \\  /        \\   /        \\     /         \\            !\n    !   \\       /  \\        /  (          )   (           )           !\n    !    `.___.'    `.____.'    \\        /     \\         /            !\n    !                            `.____.'       `._____.'             !\n    !        ______                                                   !\n    !      ,'      `.                                                 !\n    !     /          \\    .-----. .----.                              !\n    !    |            |    \\   /   \\    \\                             !\n    !    |            |     \\ /     \\    \\                            !\n    !     \\          /       '       '----'                           !\n    !      `.______.'                                                 !\n    !                                                                 !\n    `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'\n```\n\n#### Quick logo scribbles\n\n```bob\n        .---.                      _\n       /-o-/--       .--.         |-|               .--.\n    .-/ / /->       /--. \\     .--)-|    .--.-.    //.-.\\\n   ( *  \\/         / O  )|     |  |-|    |->| |   (+(-*-))\n    '-.  \\        /\\ |-//      .  * |    '--'-'    \\\\'-'/\n       \\ /        \\ '+'/        \\__/                '--'\n        '          '--'\n\n       .----.               _\n       |    |           ,--(_)\n     __|____|__       _/ .-. \\\n    |  ______--|     (_)(   ) )\n    `-/.::::.\\-'       \\ `-'_/\n     '--------'         `--(_)\n\n```\n#### Box drawing\n\n Even unicode box drawing characters are supported\n\n```bob\n            ┌─┬┐  ╔═╦╗  ╓─╥╖  ╒═╤╕\n            ├─┼┤  ╠═╬╣  ╟─╫╢  ╞═╪╡\n            └─┴┘  ╚═╩╝  ╙─╨╜  ╘═╧╛\n            ╭─┬╮\n            ├─┼┤\n            ╰─┴╯\n```\n\n\n #### Grids\n\n```bob\n\n\n    .----.        .----.\n   /      \\      /      \\            .-----+-----+-----.\n  +        +----+        +----.      |     |     |     |          .-----+-----+-----+-----+\n   \\      /      \\      /      \\     |     |     |     |         /     /     /     /     /\n    +----+        +----+        +    +-----+-----+-----+        +-----+-----+-----+-----+\n   /      \\      /      \\      /     |     |     |     |       /     /     /     /     /\n  +        +----+        +----+      |     |     |     |      +-----+-----+-----+-----+\n   \\      /      \\      /      \\     +-----+-----+-----+     /     /     /     /     /\n    '----+        +----+        +    |     |     |     |    +-----+-----+-----+-----+\n          \\      /      \\      /     |     |     |     |   /     /     /     /     /\n           '----'        '----'      '-----+-----+-----'  '-----+-----+-----+-----+\n\n\n\n\n\n       ___     ___      .---+---+---+---+---.     .---+---+---+---.  .---.   .---.\n   ___/   \\___/   \\     |   |   |   |   |   |    / \\ / \\ / \\ / \\ /   |   +---+   |\n  /   \\___/   \\___/     +---+---+---+---+---+   +---+---+---+---+    +---+   +---+\n  \\___/   \\___/   \\     |   |   |   |   |   |    \\ / \\ / \\ / \\ / \\   |   +---+   |\n  /   \\___/   \\___/     +---+---+---+---+---+     +---+---+---+---+  +---+   +---+\n  \\___/   \\___/   \\     |   |   |   |   |   |    / \\ / \\ / \\ / \\ /   |   +---+   |\n      \\___/   \\___/     '---+---+---+---+---'   '---+---+---+---'    '---'   '---'\n\n```\n\n#### Graphics Diagram\n\n```bob\n                                                                             *\n    0       3                          P *              Eye /         ^     /\n     *-------*      +y                    \\                +)          \\   /  Reflection\n  1 /|    2 /|       ^                     \\                \\           \\ v\n   *-------* |       |                v0    \\     ^ v3           --------*--------\n   | |4    | |7      | ◄╮               *----\\---/-*\n   | *-----|-*     ⤹ +-----> +x        /      v /   \\          .-.<--------        o\n   |/      |/       / ⤴               /        o     \\        ( / ) Refraction    / \\\n   *-------*       v                 /                \\        '-'               /   \\\n  5       6      +z              v1 *------------------* v2    |                o-----o\n                                                               v\n\n```\n\n#### Sequence Diagrams\n\n```bob\n\n                                   .--->  F\n          A       B      C  D     /\n          *-------*-----*---*----*----->  E\n                   \\            ^ \\\n                    v          /   '--->  G\n                     B --> C -'\n\n\n                          ,-.\n                          `-'\n                          /|\\\n         ,---.             |\n         |Bob|            / \\\n         `-+-'           Alice\n           |    hello      |\n           |-------------->|\n           |               |\n           |  Is it ok?    |\n           |<- - - - - - - |\n         ,-+-.           Alice\n         |Bob|            ,-.\n         `---'            `-'\n                          /|\\\n                           |\n                          / \\\n\n\n                      .─.\n                     ( 0 )\n                      `-'\n                    /     \\\n                   /       \\\n                  V         V\n                 .─.         .─.\n                ( 1 )       ( 4 )\n             .'  `-'         `-' .\n           .'  /   \\         |  \\ `.\n         .'   /     \\        |   \\  `.\n        V    V       V       |    \\   `.\n     .-.    .─.      .─.     V     V    V\n    ( ? )  ( 2 )    ( 3 )    .─.   .─.   .─.\n     `-'    `─'      `─'    ( 5 ) ( 6 ) ( 7 )\n                             `─'   `─'   `─'\n\n```\n\n#### Railroad diagrams\n\n```bob\n               ┌------┐   .-.  ┌---┐\n        o--╮---| elem |--( ; )-| n |--╭--o\n           |   └------┘   `-'  └---┘  |\n           | ╭------>------╮          |\n           | |    ┌---┐    |          |\n           ╰-╯-╭--| x |--╮-╰----------╯\n           |   |  └---┘  |            |\n           |   |   .-.   |            |\n           |   `--( , )--'            ^\n           |       `-'                |\n           |  ╭-------->---------╮    |\n           |  |   ┌---┐   .-.    |    |\n           ╰--╰-╭-| x |--( , )-╮-╯----╯\n                | └---┘   `-'  |\n                `-------<------'\n                                       .------------>---------------.\n           ┌-------------┐  .-.   .-.  |  ┌------┐  .-.   ┌-----┐   |    .-.   ┌------┐\n      O____| struct_name |_( : )_( | )_◞__| name |_( : )__| tpe |___◟___( | )__| body |______O\n        ◝  └-------------┘  `-'   `-'   ◜ └------┘  `-'   └-----┘  ◝     `-'   └------┘  ◜\n        |                               |                    .-.   |                     |\n        |                               `------------<------( , )--'                     |\n        |                                                    `-'                         |\n        `--------------------------------------------------------------------------------'\n\n```\n\n#### Statistical charts\n\n```bob\n\n    E +-------------------------*--+     E |                         o\n    D |-------------------*--*--|--*     D |                   o  o  |  o\n    C |-------------*--*  |  |  |  |     C |             o  o  |  |  |  |\n    B |-------*--*  |  |  |  |  |  |     B |       o  o  |  |  |  |  |  |\n    A +-*--*--+--+--+--+--+--+--+--+     A +-o--o--|--|--|--|--|--|--|--|\n        5 10 15 20 25 30 35 40 45 50         5 10 15 20 25 30 35 40 45 50\n\n\n\n  85.67 ┤                                       ╭╮\n  78.20 ┤                                       ││                  ╭╮\n  70.73 ┤                                       ││  ╭╮ ╭╮ ╭╮   ╭╮  ╭╯╰─╮\n  63.27 ┤                        ╭╮         ╭─╮ ││ ╭╯╰╮│╰─╯╰╮╭╮│╰──╯   │╭\n  55.80 ┤   ╭╮                 ╭╮││╭╮ ╭╮╭╮  │ ╰─╯╰─╯  ││    ││││       ╰╯\n  48.33 ┤   │╰╮      ╭──╮      │││││╰╮│╰╯│  │         ╰╯    ╰╯╰╯\n  40.87 ┤╭╮ │ ╰╮╭╮  ╭╯  ╰─╮╭╮╭─╯╰╯╰╯ ╰╯  ╰──╯\n  33.40 ┤││ │  ╰╯╰╮╭╯     ││╰╯\n  25.93 ┤││╭╯     ╰╯      ╰╯\n  18.47 ┼╯││\n  11.00 ┤ ╰╯\n        └───────────┴───────────┴───────────┴───────────┴───────────┴────\n      2011        2012        2013        2014        2015        2016\n\n\n```\n\n\n\n\n#### Flow charts\n\n```bob\n                      .--.            .---.  .---. .---.  .---.    .---.  .---.\n                      |  |   OS API   '---'  '---' '---'  '---'    '---'  '---'\n                      v  |              |      |     |      |        |      |\n             .-. .-. .-. |              v      v     |      v        |      v\n         .-->'-' '-' '-' |            .------------. | .-----------. |  .-----.\n         |     \\  |  /   |            | Filesystem | | | Scheduler | |  | MMU |\n         |      v . v    |            '------------' | '-----------' |  '-----'\n         |_______/ \\_____|                   |       |      |        |\n                 \\ /                         v       |      |        v\n                  |     ____              .----.     |      |    .---------.\n                  '--> /___/              | IO |<----'      |    | Network |\n                                          '----'            |    '---------'\n                                             |              |         |\n                                             v              v         v\n                                      .---------------------------------------.\n                                      |                  HAL                  |\n                                      '---------------------------------------'\n\n\n             .---.  .---. .---.  .---.    .---.  .---.\n    OS API   '---'  '---' '---'  '---'    '---'  '---'\n               |      |     |      |        |      |\n               v      v     |      v        |      v\n             .------------. | .-----------. |  .-----.\n             |  文件系统  | | |   调度器  | |  | MMU |\n             '------------' | '-----------' |  '-----'\n                    |       |      |        |\n                    v       |      |        v\n                 .----.     |      |    .---------.\n                 | IO |<----'      |    |   网络  |\n                 '----'            |    '---------'\n                    |              |         |\n                    v              v         v\n             .---------------------------------------.\n             |              硬件抽象层               |\n             '---------------------------------------'\n```\n\n#### Block diagrams\n\n```bob\n\n      vncviewer         .-,(  ),-.\n       __  _         .-(          )-.           gateway           vncserver\n      [__]|=|  ---->(    internet    )-------> __________ ------> ____   __\n     /⠶⠶ /|_|        '-(          ).-'        [_...__...°]       |    | |==|\n                         '-.( ).-'                               |____| |  |\n                                                                 /⠶⠶⠶ / |__|\n\n\n                              Valveless --------.\n                            Pulsejet engine    /\n                                              V\n                               _________.------------------+\n                    .---------'                           /  -------->\n                   /  .-------._________                  \\   thrust-->\n                  (  (      _________   `-----------o------+  -------->\n                   \\  `----'         '----'         |\n                    `------._  __^___.----.         |\n                             ||  |                  |\n                   fuel  __^ ||  | ^__spark         |GND\n                  intake     ||  |    plug          |\n                             ||  |                  |\n                             ||  |                  |\n                         ____||  `------------.     |\n                        / .---'               |     |\n                        | |                   |     |              +-+-+-+-+-+\n                    .---| |---.   __          |     |              |-+-+-+-+-|\n                 ___|  +-+-+--|--o  `---------*-----|--------------O-+-+-+-+-|\n       .-------> ___  ||||||| |  power        |     *--------------O-+-+-+-+-|\n        \\           | ||||||| |  switch       |     |              |-+-+-+-+-|\n          Water     `-+-+-+-+-'            +--o-----o--+           +-+-+-+-+-+\n          intake       HHO                 |           |\n                      Generator            |  +     -  |            Solar panel\n                                           +-----------+\n                                              Battery\n\n               =======\n                =====  symbolic antenna\n                 ===\n                  =\n                  |\n                  |          micro henry\n                  |          coil w/tuning lug\n                  |    .----.\n                  |   (.-') |\n                  |   (.-') |\n                  |   (.-') |      pico farad cap\n                  |   (.-'  |    ___  (trimmable)\n                  |   |     |   |___|\n        PC   ->  .----'-----'---'---'\n        Board    `-------------------\n                 ground plane (foil)\n\n```\n\n\n#### Mindmaps\n\n```bob\n\n                                            .-->  Alpha\n                                           /\n                                          .---->  Initial Release\n          Planning *-------.             /         \\\n                            \\           /           '---> Patch 1\n      Initial research       \\         /             \\\n                *             \\       /               '-->  Patch 2\n                 \\             \\     .---------> Beta\n                  \\             \\   /\n                   \\             o o                      _______\n                    \\          .---. *--.___             /       \\\n                     '------> (     )       '------O->  ( Release )\n                               `---' o                   \\_______/\n                               o  o o \\\n                              /    \\ \\ \\\n                          .--'      \\ \\ \\\n                         /           \\ \\ '----+->  Push backs\n                        .             \\ \\      \\\n                       /|              \\ \\      '----> Setbacks\n                      / .               \\ \\\n                     V /|                \\ '-----> Reception\n                Team  / .                 \\\n                     v /|                  \\\n             Worklaod / .                   '-->> Career change\n                     V /\n                 PTO  /\n                     V\n                 Bug\n\n```\n\n#### Circuit diagrams\n\n  It can do complex stuff such as circuit diagrams\n\n```bob\n\n       +10-15V           ___0,047R\n      *---------o-----o-|___|-o--o---------o----o-------.\n    + |         |     |       |  |         |    |       |\n    -===-      _|_    |       | .+.        |    |       |\n    -===-      .-.    |       | | | 2k2    |    |       |\n    -===-    470| +   |       | | |        |    |      _|_\n    - |       uF|     '--.    | '+'       .+.   |      \\ / LED\n      +---------o        |6   |7 |8    1k | |   |      -+-\n             ___|___   .-+----+--+--.     | |   |       |\n              -═══-    |            |     '+'   |       |\n                -      |            |1     |  |/  BC    |\n               GND     |            +------o--+   547   |\n                       |            |      |  |`>       |\n                       |            |     ,+.   |       |\n               .-------+            | 220R| |   o----||-+  IRF9Z34\n               |       |            |     | |   |    |+->\n               |       |  MC34063   |     `+'   |    ||-+\n               |       |            |      |    |       |  BYV29     -12V6\n               |       |            |      '----'       o--|<-o----o--X OUT\n 6000 micro  - | +     |            |2                  |     |    |\n Farad, 40V ___|_____  |            |--o                C|    |    |\n Capacitor  ~ ~ ~ ~ ~  |            | GND         30uH  C|    |   --- 470\n               |       |            |3      1nF         C|    |   ###  uF\n               |       |            |-------||--.       |     |    | +\n               |       '-----+----+-'           |      GND    |   GND\n               |            5|   4|             |             |\n               |             |    '-------------o-------------o\n               |             |                           ___  |\n               `-------------*------/\\/\\/------------o--|___|-'\n                                     2k              |       1k0\n                                                    .+.\n                                                    | | 5k6 + 3k3\n                                                    | | in Serie\n                                                    '+'\n                                                     |\n                                                    GND\n\n```\n\n### Advantages\n\n - Plain text format\n    - Ultimately portable, backward compatible and future proof.\n - Degrades gracefully\n    - Even when not using a graphical renderer, it would still looks good\n    as text based diagrams.\n - Easiest to use.\n    - Anyone knows how to edit text.\n\n### Goal\n- Make the rendered shape closely resembles to that of the textual representation.\n\n### NON-goals\n- To be able to make graphs and diagrams with less effort.\n- To replace standard diagramming tools.\n\n\n#### Links\n- [Svgbob specification](Svgbob/Specification.md)\n- [Circle specification](Svgbob/Circles.md)\n- [Design architecture](Svgbob/Architecture.md)\n- [Design implementation](Svgbob/Design-Implementation.md)\n- [Code Respository](https://github.com/ivanceras/svgbob)\n- [Svgbob live editor](https://ivanceras.github.io/svgbob-editor) - an online editor which lets you easily create svgbob drawing\n"
  },
  {
    "title": "An h1 header",
    "url": "/content/Markdown-example.html",
    "body": "An h1 header\n============\n\nParagraphs are separated by a blank line.\n\n2nd paragraph. *Italic*, **bold**, and `monospace`. Itemized lists\nlook like:\n\n  * this one\n  * that one\n  * the other one\n\nNote that --- not considering the asterisk --- the actual text\ncontent starts at 4-columns in.\n\n> Block quotes are\n> written like so.\n>\n> They can span multiple paragraphs,\n> if you like.\n\nUse 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all\nin chapters 12--14\"). Three dots ... will be converted to an ellipsis.\nUnicode is supported. ☺\n\n\n\nAn h2 header\n------------\n\nHere's a numbered list:\n\n 1. first item\n 2. second item\n 3. third item\n\nNote again how the actual text starts at 4 columns in (4 characters\nfrom the left side). Here's a code sample:\n\n    # Let me re-iterate ...\n    for i in 1 .. 10 { do-something(i) }\n\nAs you probably guessed, indented 4 spaces. By the way, instead of\nindenting the block, you can use delimited blocks, if you like:\n\n~~~\ndefine foobar() {\n    print \"Welcome to flavor country!\";\n}\n~~~\n\n(which makes copying & pasting easier). You can optionally mark the\ndelimited block for Pandoc to syntax highlight it:\n\n~~~python\nimport time\n# Quick, count to ten!\nfor i in range(10):\n    # (but not *too* quick)\n    time.sleep(0.5)\n    print(i)\n~~~\n\n\n\n### An h3 header ###\n\nNow a nested list:\n\n 1. First, get these ingredients:\n\n      * carrots\n      * celery\n      * lentils\n\n 2. Boil some water.\n\n 3. Dump everything in the pot and follow\n    this algorithm:\n\n        find wooden spoon\n        uncover pot\n        stir\n        cover pot\n        balance wooden spoon precariously on pot handle\n        wait 10 minutes\n        goto first step (or shut off burner when done)\n\n#### Tables\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n[Back to Spongedown](Spongedown.md)\n"
  },
  {
    "title": "Spongedown",
    "url": "/content/Spongedown.html",
    "body": "# Spongedown\n\nSpongedown extends markdown with support for additional useful features.\n - svgbob diagrams\n - inline csv\n - embedding content\n\n\n#### Svgbob diagram\n[Svgbob](Svgbob.md) makes use of textual representation of diagram and creates and svg image out of it.\n\nThis is an example of svgbob diagram\n\n```bob\n\n                                                   +-----+------+\n                                             .---> |-----|------|\n                                            /      |-----|------|\n                                           /       +-----+------+\n                                          /                 .--.\n                                         /                  |  |\n                                        /                   v  |\n  .-------.                            /           .-. .-. .-. |\n  | Table |-.                         /        .-->'-' '-' '-' |\n  '-------'  \\                       / .-----> |     \\  |  /   |\n              \\                     / /        |      v . v    |\n.------------. \\                   / /         |_______/ \\_____|\n| Flowcharts |--.                 / /                  \\ /\n'------------'   \\               / /                    |     ____\n                  v _______     / /                     '--> /___/\n.--------.         /       \\---' /\n| Graphs |------->/ Sponge  \\---'-.\n'--------'     .->\\  down   /----. \\           ^  .  /\\  .-.\n              / .->\\_______/-.    \\ \\          |_/ \\/  \\/   \\\n.--------.   / /              \\    \\ `-------> +------------->\n| Comics |--' /                \\    \\\n'--------'   /                  \\    \\         +------------+\n            /                    \\    \\        |   .-----.  |\n   .----------.                   \\    \\       |  (       ) +------------+\n   | Diagrams |                    \\    \\      |   `-, .-'  |  .-----.   |\n   '----------'                     \\    `---> |    /,'     | (       )  |\n                                     \\         |   /'       |  `-. .-'   |\n                                      \\        |            |     `.\\    |\n                                       \\       | ٩(̾●̮̮̃ ̾•̃̾)۶    |       `\\   |\n                                        \\      |            |            |\n                                         \\     +------------|   (,⊙–⊙,)७ |\n                                          `--.              +------------+\n                                              \\\n                                               v           .-,(  ),-.\n                                            ___  _      .-(          )-.\n                                           [___]|=| -->(                )      __________\n                                           /::/ |_|     '-(          ).-' --->[_...__...°]\n                                                           '-.( ).-'\n                                                                   \\      ____   __\n                                                                    '--->|    | |==|\n                                                                         |____| |  |\n                                                                         /::::/ |__|\n\n```\n\n#### CSV\n\nCSV data are rendered as tables\n\n\n    ```csv\n    foo,bar,baz\n    apple,banana,carrots\n    rust,haskel,c\n    1,2,3\n    ```\n\n\n\n```csv\nfoo,bar,baz\napple,banana,carrots\nrust,haskel,c\n1,2,3\n```\n\n#### Embedding content\n\n```csv capture as input1\nwhat,ever,goes,here\nwill,be,captured,and\ncan,be,referenced,later\non,\n```\n\n![](records.csv)\n![](image.jpg)\n\n![```csv][input1]\n\n#### Markdown works as is.\n\n[Render and Example markdown](Markdown-example.md)\n\n\n#### Links\n - [Code Repository](https://github.com/ivanceras/spongedown)\n"
  },
  {
    "title": "Jovansonlee B. Cesar",
    "url": "/content/Resume.html",
    "body": "# Jovansonlee B. Cesar\n\nOpensource programmer with passion for innovative technologies\n\n- **Software Engineer**\n- **Framework architect**\n- **Library maintainer**\n- **Opensource contributor**\n\n\n\n * mobile: +639156659318\n * email: ivanceras@gmail.com\n * skype: ivanceras\n\n## Expertise\n* Substrate and rust base blockchain\n* Data analytics and visualization\n* Heuristic programming on complex problems\n* High availability and scaling solutions\n* Code quality and code correctness\n* Research and development\n\n## Preferred Technology Stack\n* Linux, Rust, Substrate, PostgreSQL, Webassembly\n\n\n## All Technology Stack\n* Linux, **Rust**, PostgreSQL, Java, Php, Bash/Shell, Docker\n* Javascript, HTML/CSS, **Elm**, **Webassembly**, React, React-native\n* **PostgreSQL**,Mysql,Oracle,SQLite, Hadoop/Hive/MapReduce\n* git, vim, Eclipse, IntelliJ\n* xls+ods+csv data processing\n\n\n## Professional Work Experience\n\n* **ChainSafe System Inc., (October 2021 - Present)**\n    - Protocol Engineer\n    - Responsibilities:\n        - Migrate old version of chainbridge pallet into new version of Substrate\n        - Involve in integration work for Arweave, NEAR, Solana blockchain\n    - Technologies used:\n        - **rust**, substrate, docker, erlang\n\n* **Freelancing and opensource (August 2020 - October 2021)**\n    - Improve and release new versions of opensource projects: (sauron, svgbob)\n    - Self-study substrate framework and polkadot\n\n* **Centrifuge Inc (March 2020 - May 2020)**\n    - Centrifuge-chain protocol engineer\n    - Responsibilities:\n        - Build and integrate substrate pallet/modules into centrifuge-chain\n        - Build and integrate monitoring tools for blockchain validators and nodes\n    - Technologies used:\n        - **rust**, blockchain, cryptography, **paritytech/substrate**, polkadot network, prometheus + grafana, bash scripting\n\n\n* **Freelancing and opensource (May 2019 - Dec 2019)**\n    - Self study rust and freelance contracts.\n    - Projects:\n        - **dns gateway module** - an independent contract project which manages and automate acquisition of ssl certificates from lets-encrypt.\n            - dynamically serve multiple domains in one server using the appropriate certificate for the requested domain.\n            - involves low level parsing of tcp-packets, extracting the SNI/domain name in the handshake process.\n        - **open-api parser** - generates rust source code from open-api spec.\n\n    - Technolgoies used:\n        - **rust**, tokio, actix-web, rustls\n\n* **Senior Software Engineer at Copyleft Solutions (Jun 2017 - Dec 2018)**\n\n    - Involvement\n        - Fix and maintain existing android applications\n        - Port excel spreadsheet apps into web application\n        - Prototype small experimental projects involving webcam and image processing\n        - Screened and interview talented developers into the company\n\n    - Technologies used\n        - Android/Java, typescript\n        - Rust, gtk\n\n* **Senior Software Engineer at TRUSTe/TrustArc (Jan 2012-Jun 2017)**\n\n    - Projects\n        - Multi-region database selective syncing setup.\n            - Setup custom configuration to selectively sync certain data from EU-US region, while complying the EU regulations\n            of which data is not allowed to move out of EU servers.\n       - Created a custom lightweight ORM which doesn't allow loss of data in the event of database downtime up to several hours.\n\n    - Involvement\n        - Prototype and build critical products in the organization, such as the portal which links all the apps in the organization.\n        - Design database schema for high throughput application, such as the backend for ads system.\n        - Research and development on processing 1TB of logs per month into an analytical report, using appropriate BigData Analytics tools such as Hadoop/Hive.\n        - Implemented a sophisticated requirement to do selective synchronization of data into multiple database instances from different regions, in accordance to US and EU data regulations.\n        - Brought the database to terabyte scale, making it to the top 5 AWS apps in terms of page impression.\n        - Data recovery and correction through scraping out logs from the production servers, in the event of unexpected data loss.\n        - Completed an backend service for doing static and dynamic analysis of ios apps.\n        - Implemented a project involving document search using amazon ElasticSearch.\n\n    - Skills used\n        - **Java**, GWT, Amazon EMR, Amazon SDK(lambda, s3, elasticsearch)\n        - Javascript, Angularjs, jquery, bootstrap\n        - PostgreSQL, SymmetricDS, SQLite\n        - Rust, python, C, bash\n\n\n\n * **Senior Software Engineer at Cebu Machine Laboratories Inc. (Oct. 2010 - Jan. 2012)**\n\n    - Involvement\n        - Research and prototype an Interactive Comic Game for the Ipad when it first came out.\n        - Using C, Objective-C and opengl, animate 2D assets created by the artist.\n\n    - Accomplishments\n        - Used stencil and svg overlay on the 2D images, presented as a very simple solution to animate 2D images for an interactive comic game.\n\n\n\n * **Junior Software Engineer at Cebu Mitsumi Inc. (Apr 2007 - Aug 2009)**\n\n    - Involvement\n        - Maintain and improve an existing Shop Floor Control/Manufacturing Management Software.\n        - Improved the existing UI and UX to reduce the number of actions to accomplish tasks.\n        - Improved the flexibility of the report generator to provide a more detailed view of the data into an interactive excel spreadsheet.\n\n    - Skill used\n        - Oracle\n        - Powerbuilder, Powerscripts\n        - MS Excel Spreadsheet, VBA scripts and macros.\n\n\n\n## Education\n* **Bohol Island State University ( 2002-2007 ), C.P.G North Avenue, Tagbilaran City, Bohol**\n    - Bachelor of Science in Computer Engineering\n    - Learning highlights\n        - Linux\n        - C, Lowlevel-C Programming, PIC\n        - Hardware interfacing\n        - Self-taught: php, javascript, html/css.\n\n## Desirable qualities\n- I do research, experiments, exploration on my free-time on just about anything\nranging from database tools, neat algorithmns, learning programming languages,\nvoxel-based raytracing, baremetal OS.\n- Incorporate these learnings into company products.\n\n## Opensource project involvement\n\n* [Svgbob](https://github.com/ivanceras/svgbob) - converts inline ascii scribbles and diagrams into a nicely rendered svg,\n       [demo](https://ivanceras.github.io/svgbob-editor/)\n* [Rustorm](https://github.com/ivanceras/rustorm) - an orm for rust, primarily used by the diwata project.\n* [Sauron](https://github.com/ivanceras/sauron) - A very fast library for building web apps, using the latest web technology: webassembly.\n* [Restq](https://github.com/ivanceras/restq) - An alternative to graphql which parses http url to express an api query.\n\n"
  }
]